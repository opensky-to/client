// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ValidationProblemDetails.cs" company="OpenSky">
// OpenSky project 2021-2022
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace OpenSky.Client.OpenAPIs
{
    using System;
    using System.Collections.Generic;

    using Newtonsoft.Json;

    /// -------------------------------------------------------------------------------------------------
    /// <summary>
    /// Validation problem details - returned by API.
    /// </summary>
    /// <remarks>
    /// sushi.at, 07/05/2021.
    /// </remarks>
    /// -------------------------------------------------------------------------------------------------
    public class ValidationProblemDetails
    {
        /// -------------------------------------------------------------------------------------------------
        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        /// -------------------------------------------------------------------------------------------------
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detail")]
        public string Detail { get; set; }

        /// -------------------------------------------------------------------------------------------------
        /// <summary>
        /// Validation errors dictionary.
        /// </summary>
        /// -------------------------------------------------------------------------------------------------
        [JsonProperty(PropertyName = "errors")]
        public IDictionary<string, string[]> Errors { get; } = new Dictionary<string, string[]>(StringComparer.Ordinal);

        /// -------------------------------------------------------------------------------------------------
        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.It may or may not
        /// yield further information if dereferenced.
        /// </summary>
        /// -------------------------------------------------------------------------------------------------
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "instance")]
        public string Instance { get; set; }

        /// -------------------------------------------------------------------------------------------------
        /// <summary>
        /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence
        /// of the problem.
        /// </summary>
        /// -------------------------------------------------------------------------------------------------
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "status")]
        public int? Status { get; set; }

        /// -------------------------------------------------------------------------------------------------
        /// <summary>
        /// A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to
        /// occurrence of the problem, except for purposes of localization(e.g., using proactive content
        /// negotiation;
        /// see[RFC7231], Section 3.4).
        /// </summary>
        /// -------------------------------------------------------------------------------------------------
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "title")]
        public string Title { get; set; }

        /// -------------------------------------------------------------------------------------------------
        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type. This specification encourages
        /// that, when dereferenced, it provide human-readable documentation for the problem type (e.g.,
        /// using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed
        /// to be "about:blank".
        /// </summary>
        /// -------------------------------------------------------------------------------------------------
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "type")]
        public string Type { get; set; }
    }
}