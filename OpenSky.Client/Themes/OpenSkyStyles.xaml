<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="http://schemas.modernwpf.com/2019"
                    xmlns:controls="clr-namespace:OpenSky.Client.Controls"
                    xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
                    xmlns:converters="clr-namespace:OpenSky.Client.Converters"
                    xmlns:themes="clr-namespace:OpenSky.Client.Themes">

    <!-- OPENSKY COLOR STYLE DEFINITIONS -->
    <Color x:Key="OpenSkyTeal">#05826c</Color>
    <SolidColorBrush x:Key="OpenSkyTealBrush" Color="{StaticResource OpenSkyTeal}" />
    <Color x:Key="OpenSkyTealLight">#08c6a4</Color>
    <SolidColorBrush x:Key="OpenSkyTealLightBrush" Color="{StaticResource OpenSkyTealLight}" />
    <Color x:Key="OpenSkyRed">DarkRed</Color>
    <SolidColorBrush x:Key="OpenSkyRedBrush" Color="{StaticResource OpenSkyRed}" />
    <Color x:Key="OpenSkyRedLight">#CC0000</Color>
    <SolidColorBrush x:Key="OpenSkyRedLightBrush" Color="{StaticResource OpenSkyRedLight}" />
    <Color x:Key="OpenSkyDarkGrayHeader">#29323c</Color>
    <SolidColorBrush x:Key="OpenSkyDarkGrayHeaderBrush" Color="{StaticResource OpenSkyDarkGrayHeader}" />
    <Color x:Key="OpenSkyGroupboxBackground">#1a1e22</Color>
    <SolidColorBrush x:Key="OpenSkyGroupboxBackgroundBrush" Color="{StaticResource OpenSkyGroupboxBackground}" />
    <Color x:Key="OpenSkyLightYellow">Yellow</Color>
    <SolidColorBrush x:Key="OpenSkyLightYellowBrush" Color="{StaticResource OpenSkyLightYellow}" />
    <Color x:Key="OpenSkyWarningOrange">DarkOrange</Color>
    <SolidColorBrush x:Key="OpenSkyWarningOrangeBrush" Color="{StaticResource OpenSkyWarningOrange}" />
    <Color x:Key="OpenSkyWarningOrangeLight">Orange</Color>
    <SolidColorBrush x:Key="OpenSkyWarningOrangeLightBrush" Color="{StaticResource OpenSkyWarningOrangeLight}" />
    <Color x:Key="OpenSkySimBrief">Black</Color>
    <SolidColorBrush x:Key="OpenSkySimBriefBrush" Color="{StaticResource OpenSkySimBrief}" />
    <Color x:Key="OpenSkySimBriefText">White</Color>
    <SolidColorBrush x:Key="OpenSkySimBriefTextBrush" Color="{StaticResource OpenSkySimBriefText}" />

    <syncfusion:ChartColorModel x:Key="OpenSkyTealChartColors">
        <syncfusion:ChartColorModel.CustomBrushes>
            <SolidColorBrush Color="#0aa88c" />
            <SolidColorBrush Color="#05826c" />
            <SolidColorBrush Color="#047762" />
            <SolidColorBrush Color="#046957" />
            <SolidColorBrush Color="#045849" />
            <SolidColorBrush Color="#034c3f" />
            <SolidColorBrush Color="#023b31" />
            <SolidColorBrush Color="#012c25" />
            <SolidColorBrush Color="#011d18" />
        </syncfusion:ChartColorModel.CustomBrushes>
    </syncfusion:ChartColorModel>

    <syncfusion:ChartColorModel x:Key="DarkChartColors">
        <syncfusion:ChartColorModel.CustomBrushes>
            <SolidColorBrush Color="#05826c" />
            <SolidColorBrush Color="DarkGreen" />
            <SolidColorBrush Color="DarkSlateBlue" />
            <SolidColorBrush Color="DarkRed" />
            <SolidColorBrush Color="DodgerBlue" />
            <SolidColorBrush Color="DarkOrange" />
            <SolidColorBrush Color="DarkCyan" />
            <SolidColorBrush Color="DarkMagenta" />
        </syncfusion:ChartColorModel.CustomBrushes>
    </syncfusion:ChartColorModel>

    <Style x:Key="DatagridCellRightAlign">
        <Setter Property="Control.HorizontalAlignment" Value="Right" />
        <Setter Property="Control.VerticalAlignment" Value="Center" />
        <Setter Property="Control.Margin" Value="15,0" />
    </Style>

    <DataTemplate x:Key="PieChartValueLabelTemplate" DataType="{x:Type syncfusion:ChartPieAdornment}">
        <DataTemplate.Resources>
            <converters:PieChartValueAdornerLabelConverter x:Key="PieChartValueAdornerLabelConverter" />
            <converters:PieChartColorConverter x:Key="PieChartColorConverter" />
        </DataTemplate.Resources>
        <Border Background="{Binding Path=., Converter={StaticResource PieChartColorConverter}}" CornerRadius="2">
            <StackPanel Orientation="Horizontal">
                <TextBlock Margin="3,1" Text="{Binding Item, Converter={StaticResource PieChartValueAdornerLabelConverter}}" FontSize="11" />
            </StackPanel>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="PieChartValueLabelOthersTemplate" DataType="{x:Type syncfusion:ChartPieAdornment}">
        <DataTemplate.Resources>
            <converters:PieChartValueAdornerLabelConverter x:Key="PieChartValueAdornerLabelConverter" />
            <converters:PieChartColorConverter x:Key="PieChartColorConverter" />
        </DataTemplate.Resources>
        <Border Background="{Binding Path=., Converter={StaticResource PieChartColorConverter}}" CornerRadius="2">
            <StackPanel Orientation="Horizontal">
                <TextBlock Margin="3,1" Text="{Binding Item, Converter={StaticResource PieChartValueAdornerLabelConverter}, ConverterParameter=others}" FontSize="11" />
            </StackPanel>
        </Border>
    </DataTemplate>

    <Style x:Key="OpenSkyRedButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{StaticResource OpenSkyRedBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="8,5,8,6" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
        <Setter Property="ui:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
        <Setter Property="ui:FocusVisualHelper.FocusVisualMargin" Value="-3" />
        <Setter Property="ui:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="Background"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}"
                        SnapsToDevicePixels="True">
                        <Border
                            x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}">
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{StaticResource OpenSkyRedLightBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OpenSkyOrangeButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{StaticResource OpenSkyWarningOrangeBrush}" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="8,5,8,6" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
        <Setter Property="ui:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
        <Setter Property="ui:FocusVisualHelper.FocusVisualMargin" Value="-3" />
        <Setter Property="ui:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="Background"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}"
                        SnapsToDevicePixels="True">
                        <Border
                            x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}">
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{StaticResource OpenSkyWarningOrangeLightBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OpenSkyButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{StaticResource OpenSkyTealBrush}" />
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="8,5,8,6" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
        <Setter Property="ui:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
        <Setter Property="ui:FocusVisualHelper.FocusVisualMargin" Value="-3" />
        <Setter Property="ui:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="Background"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}"
                        SnapsToDevicePixels="True">
                        <Border
                            x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}">
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{StaticResource OpenSkyTealLightBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="#404040" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OpenSkyPageStyle" TargetType="controls:OpenSkyPage">
        <Style.Resources>
            <ResourceDictionary>
                <ResourceDictionary.MergedDictionaries>
                    <ui:ThemeResources RequestedTheme="Dark">
                        <ui:ThemeResources.ThemeDictionaries>
                            <ResourceDictionary x:Key="Dark">
                                <ResourceDictionary.MergedDictionaries>
                                    <ui:ColorPaletteResources
                                        TargetTheme="Dark"
                                        Accent="#05826c"
                                        AltHigh="#404040"
                                        BaseHigh="#FFC9C9C9"/>
                                </ResourceDictionary.MergedDictionaries>
                            </ResourceDictionary>
                        </ui:ThemeResources.ThemeDictionaries>
                    </ui:ThemeResources>
                    <ui:XamlControlsResources />

                    <themes:FontOverrides FontFamily="Montserrat" />
                    <ResourceDictionary Source="VectorGraphics.xaml" />
                    <ResourceDictionary Source="OpenSkyStyles.xaml" />
                    <ResourceDictionary Source="GridFilter.xaml" />
                </ResourceDictionary.MergedDictionaries>
            </ResourceDictionary>
        </Style.Resources>
        <Setter Property="ui:ThemeManager.IsThemeAware" Value="True" />
        <Setter Property="FontFamily" Value="/Fonts/#Montserrat" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="#c2c2c2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="UserControl">
                    <Grid>
                        <ScrollViewer x:Name="ScrollViewer" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                        <Border x:Name="LoadingOverlay" Background="#B0000000" Visibility="Collapsed">
                            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                <ui:ProgressRing IsActive="True" Width="100" Height="100"></ui:ProgressRing>
                                <TextBlock HorizontalAlignment="Center" FontSize="25" Margin="0,10,0,0" Text="{TemplateBinding controls:OpenSkyPage.LoadingText}" />
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="controls:OpenSkyPage.HorizontalScrollBar" Value="False">
                            <Setter TargetName="ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyPage.HorizontalScrollBar" Value="True">
                            <Setter TargetName="ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Auto" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyPage.VerticalScrollBar" Value="False">
                            <Setter TargetName="ScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyPage.VerticalScrollBar" Value="True">
                            <Setter TargetName="ScrollViewer" Property="VerticalScrollBarVisibility" Value="Auto" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyPage.ShowLoading" Value="True">
                            <Setter TargetName="LoadingOverlay" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyPage.ShowLoading" Value="False">
                            <Setter TargetName="LoadingOverlay" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OpenSkyWindowStyle" TargetType="controls:OpenSkyWindow">
        <Style.Resources>
            <Storyboard x:Key="Rotate" Timeline.DesiredFrameRate="5">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" RepeatBehavior="Forever">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:1:0" Value="360" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource SystemControlPageBackgroundAltHighBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource SystemControlPageTextBaseHighBrush}" />
        <Setter Property="ui:ThemeManager.IsThemeAware" Value="True" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontFamily" Value="/Fonts/#Montserrat" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="1*" />
                        </Grid.RowDefinitions>
                        <Rectangle Fill="{StaticResource OpenSkyDarkGrayHeaderBrush}" Grid.Row="0" />
                        <Grid Grid.Row="0" Margin="15, 10">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="1*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0">
                                <Image Grid.Row="0" Grid.Column="0" RenderTransformOrigin="0.5,0.5" Width="40" Height="40" x:Name="GearImage" Source="{StaticResource OpenskyLogoGradientOnly}">
                                    <Image.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform/>
                                        </TransformGroup>
                                    </Image.RenderTransform>
                                    <Image.Triggers>
                                        <EventTrigger RoutedEvent="Window.Loaded">
                                            <BeginStoryboard Storyboard="{StaticResource Rotate}"/>
                                        </EventTrigger>
                                    </Image.Triggers>
                                </Image>
                                <Image Grid.Row="0" Grid.Column="0" Width="40" Height="40" Source="{StaticResource OpenskyLogoPlaneAndTrail}" />
                                <Image Grid.Row="0" Grid.Column="0" Width="63" Height="63" Source="{StaticResource SantaHat}" x:Name="SantaHat" Margin="-14,-18,-20,-20" />
                            </Grid>
                            <TextBlock Grid.Column="1" FontSize="30" VerticalAlignment="Center" Margin="5,0,0,0" FontFamily="/Fonts/#Montserrat" Text="{TemplateBinding Title}" />
                            <Rectangle Grid.Column="0" Grid.ColumnSpan="3" x:Name="MoveWindow" Fill="Transparent" Margin="-10" />
                            <StackPanel Grid.Column="2" Orientation="Horizontal">
                                <Button x:Name="MinimizeButton" Width="30" Height="30" FontWeight="Bold" Padding="0" Style="{StaticResource OpenSkyButtonStyle}" Margin="0,0,5,0">
                                    <Image Width="12" Height="12" Source="{StaticResource MinimizeArrow}" />
                                </Button>
                                <Button x:Name="MaximizeButton" Width="30" Height="30" FontWeight="Bold" Padding="0" Style="{StaticResource OpenSkyButtonStyle}" Margin="0,0,5,0">
                                    <Image x:Name="MaximizeButtonImage" Width="15" Height="15" Source="{StaticResource ExpandArrows}" />
                                </Button>
                                <Button x:Name="CloseButton" Width="30" Height="30" FontWeight="Bold" Padding="0" Style="{StaticResource OpenSkyRedButtonStyle}">
                                    <Image Width="20" Height="20" Source="{StaticResource ClosingX}" />
                                </Button>
                            </StackPanel>
                        </Grid>
                        <Border Grid.Row="1" Background="#1a1e22" />
                        <ScrollViewer x:Name="ScrollViewer" Grid.Row="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                        <Border x:Name="LoadingOverlay" Grid.Row="1" Background="#B0000000" Visibility="Collapsed">
                            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                <ui:ProgressRing IsActive="True" Width="100" Height="100"></ui:ProgressRing>
                                <TextBlock HorizontalAlignment="Center" FontSize="25" Margin="0,10,0,0" Text="{TemplateBinding controls:OpenSkyWindow.LoadingText}" />
                            </StackPanel>
                        </Border>
                        <Grid Grid.Row="1">
                            <ItemsControl x:Name="NotificationsList" HorizontalAlignment="Right" VerticalAlignment="Bottom" Background="Transparent" HorizontalContentAlignment="Stretch" Grid.IsSharedSizeScope="True">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <VirtualizingStackPanel VerticalAlignment="Bottom" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Grid>
                        <DockPanel Grid.Row="1" LastChildFill="True" x:Name="MessageBoxContainer" />
                        <Grid Grid.Row="0" Grid.RowSpan="2" x:Name="ResizeGrid">
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" VerticalAlignment="Top" Height="5" Margin="5,0,5,0" x:Name="top" />
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" VerticalAlignment="Bottom" Height="5" Margin="5,0,5,0" x:Name="bottom" />
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" HorizontalAlignment="Left" Width="5" Margin="0,5,0,5" x:Name="left"/>
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" HorizontalAlignment="Right" Width="5" Margin="0,5,0,5" x:Name="right" />
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="5" Height="5" x:Name="bottomLeft" />
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" HorizontalAlignment="Right" VerticalAlignment="Bottom" Height="5" Width="5" x:Name="bottomRight" />
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" HorizontalAlignment="Right" VerticalAlignment="Top" Width="5" Height="5" x:Name="topRight" />
                            <Rectangle Stroke="{x:Null}" Fill="Transparent" HorizontalAlignment="Left" VerticalAlignment="Top" Width="5"  Height="5" x:Name="topLeft" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="MaximizeButtonImage" Property="Source" Value="{StaticResource RestoreArrows}" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="MaximizeButtonImage" Property="Source" Value="{StaticResource ExpandArrows}" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.ShowMinMaxButtons" Value="False">
                            <Setter TargetName="MinimizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.ShowMinMaxButtons" Value="True">
                            <Setter TargetName="MinimizeButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MaximizeButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.HorizontalScrollBar" Value="False">
                            <Setter TargetName="ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.HorizontalScrollBar" Value="True">
                            <Setter TargetName="ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Auto" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.VerticalScrollBar" Value="False">
                            <Setter TargetName="ScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.VerticalScrollBar" Value="True">
                            <Setter TargetName="ScrollViewer" Property="VerticalScrollBarVisibility" Value="Auto" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.ShowLoading" Value="True">
                            <Setter TargetName="LoadingOverlay" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="controls:OpenSkyWindow.ShowLoading" Value="False">
                            <Setter TargetName="LoadingOverlay" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultGroupBoxStyle" TargetType="GroupBox">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{StaticResource OpenSkyGroupboxBackgroundBrush}" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
        <Setter Property="Padding" Value="{DynamicResource GroupBoxPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Border Background="{TemplateBinding Background}" CornerRadius="2">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="0" Grid.RowSpan="2" Margin="0,10,0,0" BorderThickness="1" BorderBrush="#666666" CornerRadius="1.5" />
                            <Border Grid.Row="0" Background="{StaticResource OpenSkyGroupboxBackgroundBrush}" HorizontalAlignment="Left" Margin="10,0,0,0" Padding="3,0">
                                <ContentPresenter
                                x:Name="HeaderPresenter"
                                TextElement.FontSize="8"
                                TextElement.FontWeight="SemiBold"
                                Margin="0,4,0,0"
                                ContentSource="Header"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ContentPresenter
                            Grid.Row="1"
                            Margin="5"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="GroupBox" BasedOn="{StaticResource DefaultGroupBoxStyle}" />

    <ui:CornerRadiusFilterConverter x:Key="TopLeftCornerRadiusDoubleValueConverter" Filter="TopLeftValue" />
    <ui:CornerRadiusFilterConverter x:Key="BottomRightCornerRadiusDoubleValueConverter" Filter="BottomRightValue" />

    <Style x:Key="RedUncheckedDisabledCheckBox" TargetType="CheckBox">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource CheckBoxBackgroundUnchecked}" />
        <Setter Property="Foreground" Value="{DynamicResource CheckBoxForegroundUnchecked}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUnchecked}" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
        <Setter Property="ui:FocusVisualHelper.UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
        <Setter Property="ui:FocusVisualHelper.FocusVisualMargin" Value="-7,-3,-7,-3" />
        <Setter Property="ui:ControlHelper.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <ControlTemplate.Resources>
                        <StreamGeometry x:Key="CheckMark">M 17.939453 5.439453 L 7.5 15.888672 L 2.060547 10.439453 L 2.939453 9.560547 L 7.5 14.111328 L 17.060547 4.560547 Z</StreamGeometry>
                        <StreamGeometry x:Key="CheckboxIndeterminate">M 15 5 L 15 15 L 5 15 L 5 5 Z</StreamGeometry>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="RootGrid"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}"
                        SnapsToDevicePixels="True">
                        <Grid VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid VerticalAlignment="Top">
                                <Rectangle
                                    x:Name="NormalRectangle"
                                    Fill="{DynamicResource CheckBoxCheckBackgroundFillUnchecked}"
                                    Stroke="{DynamicResource CheckBoxCheckBackgroundStrokeUnchecked}"
                                    StrokeThickness="{DynamicResource CheckBoxBorderThemeThickness}"
                                    UseLayoutRounding="False"
                                    Height="20"
                                    Width="20"
                                    RadiusX="{TemplateBinding ui:ControlHelper.CornerRadius, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}"
                                    RadiusY="{TemplateBinding ui:ControlHelper.CornerRadius, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                                <ui:FontIconFallback
                                    x:Name="CheckGlyph"
                                    FontFamily="{DynamicResource SymbolThemeFontFamily}"
                                    Data="{StaticResource CheckMark}"
                                    FontSize="16"
                                    Foreground="{DynamicResource CheckBoxCheckGlyphForegroundUnchecked}"
                                    Opacity="0" />
                            </Grid>
                            <ui:ContentPresenterEx
                                x:Name="ContentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Grid.Column="1"
                                TextWrapping="Wrap"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- UncheckedNormal -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundUnchecked}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUnchecked}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUnchecked}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{StaticResource OpenSkyRedBrush}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{StaticResource OpenSkyRedBrush}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUnchecked}" />
                        </MultiTrigger>
                        <!-- UncheckedPointerOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundUncheckedPointerOver}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUncheckedPointerOver}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUncheckedPointerOver}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{StaticResource OpenSkyRedLightBrush}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{StaticResource OpenSkyRedLightBrush}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUncheckedPointerOver}" />
                        </MultiTrigger>
                        <!-- UncheckedPressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundUncheckedPressed}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUncheckedPressed}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUncheckedPressed}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeUncheckedPressed}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillUncheckedPressed}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUncheckedPressed}" />
                        </MultiTrigger>
                        <!-- UncheckedDisabled -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundUncheckedDisabled}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundUncheckedDisabled}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushUncheckedDisabled}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{StaticResource OpenSkyRedBrush}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{StaticResource OpenSkyRedBrush}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundUncheckedDisabled}" />
                        </MultiTrigger>
                        <!-- CheckedNormal -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundChecked}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundChecked}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushChecked}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeChecked}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillChecked}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundChecked}" />
                            <Setter TargetName="NormalRectangle" Property="StrokeThickness" Value="{DynamicResource CheckBoxCheckedStrokeThickness}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <!-- CheckedPointerOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundCheckedPointerOver}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundCheckedPointerOver}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushCheckedPointerOver}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeCheckedPointerOver}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillCheckedPointerOver}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundCheckedPointerOver}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <!-- CheckedPressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundCheckedPressed}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundCheckedPressed}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushCheckedPressed}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeCheckedPressed}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillCheckedPressed}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundCheckedPressed}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <!-- CheckedDisabled -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundCheckedDisabled}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundCheckedDisabled}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushCheckedDisabled}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeChecked}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillChecked}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundCheckedDisabled}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <!-- IndeterminateNormal -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="{x:Null}" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminate}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminate}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminate}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminate}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminate}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminate}" />
                            <Setter TargetName="CheckGlyph" Property="Data" Value="{StaticResource CheckboxIndeterminate}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <!-- IndeterminatePointerOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="{x:Null}" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminatePointerOver}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminatePointerOver}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminatePointerOver}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminatePointerOver}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminatePointerOver}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminatePointerOver}" />
                            <Setter TargetName="CheckGlyph" Property="Data" Value="{StaticResource CheckboxIndeterminate}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <!-- IndeterminatePressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="{x:Null}" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminatePressed}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminatePressed}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminatePressed}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminatePressed}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminatePressed}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminatePressed}" />
                            <Setter TargetName="CheckGlyph" Property="Data" Value="{StaticResource CheckboxIndeterminate}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <!-- IndeterminateDisabled -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="{x:Null}" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="Foreground" Value="{DynamicResource CheckBoxForegroundIndeterminateDisabled}" />
                            <Setter TargetName="RootGrid" Property="Background" Value="{DynamicResource CheckBoxBackgroundIndeterminateDisabled}" />
                            <Setter TargetName="RootGrid" Property="BorderBrush" Value="{DynamicResource CheckBoxBorderBrushIndeterminateDisabled}" />
                            <Setter TargetName="NormalRectangle" Property="Stroke" Value="{DynamicResource CheckBoxCheckBackgroundStrokeIndeterminateDisabled}" />
                            <Setter TargetName="NormalRectangle" Property="Fill" Value="{DynamicResource CheckBoxCheckBackgroundFillIndeterminateDisabled}" />
                            <Setter TargetName="CheckGlyph" Property="Foreground" Value="{DynamicResource CheckBoxCheckGlyphForegroundIndeterminateDisabled}" />
                            <Setter TargetName="CheckGlyph" Property="Data" Value="{StaticResource CheckboxIndeterminate}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LabelOnRightAppBarButton" TargetType="ui:AppBarButton">
        <Setter Property="Background" Value="{DynamicResource AppBarButtonBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource AppBarButtonForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrush}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Width" Value="NaN" />
        <Setter Property="UseSystemFocusVisuals" Value="{DynamicResource UseSystemFocusVisuals}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:AppBarButton">
                    <ControlTemplate.Resources>
                        <StreamGeometry x:Key="ChevronRight">M 5.029297 19.091797 L 14.111328 10 L 5.029297 0.908203 L 5.908203 0.029297 L 15.888672 10 L 5.908203 19.970703 Z</StreamGeometry>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="Root"
                        MinWidth="{TemplateBinding MinWidth}"
                        MaxWidth="{TemplateBinding MaxWidth}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        SnapsToDevicePixels="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ApplicationViewStates">
                                <ui:VisualStateGroupListener.Listener>
                                    <ui:VisualStateGroupListener x:Name="ApplicationViewStatesListener" />
                                </ui:VisualStateGroupListener.Listener>
                                <VisualState x:Name="FullSize" />
                                <VisualState x:Name="Compact" />
                                <VisualState x:Name="LabelOnRight" />
                                <VisualState x:Name="LabelCollapsed" />
                                <VisualState x:Name="Overflow" />
                                <VisualState x:Name="OverflowWithToggleButtons" />
                                <VisualState x:Name="OverflowWithMenuIcons" />
                                <VisualState x:Name="OverflowWithToggleButtonsAndMenuIcons" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <ui:VisualStateGroupListener.Listener>
                                    <ui:VisualStateGroupListener x:Name="CommonStatesListener" />
                                </ui:VisualStateGroupListener.Listener>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="PointerOver" />
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                                <VisualState x:Name="OverflowNormal" />
                                <VisualState x:Name="OverflowPointerOver" />
                                <VisualState x:Name="OverflowPressed" />
                                <!--<VisualState x:Name="OverflowSubMenuOpened" />-->
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="KeyboardAcceleratorTextVisibility">
                                <ui:VisualStateGroupListener.Listener>
                                    <ui:VisualStateGroupListener x:Name="KeyboardAcceleratorTextVisibilityListener" />
                                </ui:VisualStateGroupListener.Listener>
                                <VisualState x:Name="KeyboardAcceleratorTextCollapsed" />
                                <VisualState x:Name="KeyboardAcceleratorTextVisible" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FlyoutStates">
                                <ui:VisualStateGroupListener.Listener>
                                    <ui:VisualStateGroupListener x:Name="FlyoutStatesListener" />
                                </ui:VisualStateGroupListener.Listener>
                                <VisualState x:Name="NoFlyout" />
                                <VisualState x:Name="HasFlyout" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Rectangle
                                x:Name="AppBarButtonInnerBorder"
                                StrokeThickness="1"
                                Stroke="{TemplateBinding BorderBrush}" />
                            <Grid
                                x:Name="ContentRoot"
                                MinHeight="{DynamicResource AppBarThemeCompactHeight}">

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Viewbox
                                    Grid.Row="0" Grid.Column="0" x:Name="ContentViewbox"
                                    Height="{DynamicResource AppBarButtonContentHeight}"
                                    Margin="{DynamicResource AppBarButtonContentViewboxMargin}"
                                    HorizontalAlignment="Stretch">
                                    <ContentPresenter
                                        x:Name="Content"
                                        Content="{TemplateBinding Icon}"
                                        TextElement.Foreground="{TemplateBinding Foreground}" />
                                </Viewbox>
                                <TextBlock
                                    x:Name="TextLabel"
                                    Grid.Row="0" Grid.Column="1"
                                    Text="{TemplateBinding Label}"
                                    Foreground="{TemplateBinding Foreground}"
                                    FontSize="12"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    TextAlignment="Left"
                                    TextWrapping="Wrap"
                                    Margin="{DynamicResource AppBarButtonTextLabelOnRightMargin}" />
                                <TextBlock
                                    Grid.Row="0" Grid.Column="0" x:Name="OverflowTextLabel"
                                    Text="{TemplateBinding Label}"
                                    Foreground="{TemplateBinding Foreground}"
                                    FontSize="{DynamicResource ControlContentThemeFontSize}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    TextAlignment="Left"
                                    TextWrapping="NoWrap"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Center"
                                    Margin="12,0,12,0"
                                    Padding="{DynamicResource AppBarButtonOverflowTextLabelPadding}"
                                    Visibility="Collapsed" />
                                <TextBlock
                                    x:Name="KeyboardAcceleratorTextLabel"
                                    Grid.Row="0" Grid.Column="1"
                                    Style="{DynamicResource CaptionTextBlockStyle}"
                                    Text="{TemplateBinding InputGestureText}"
                                    MinWidth="34"
                                    Margin="24,0,12,0"
                                    Foreground="{DynamicResource AppBarButtonKeyboardAcceleratorTextForeground}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    Visibility="Collapsed" />
                                <ui:FontIconFallback
                                    x:Name="SubItemChevron"
                                    Grid.Row="0" Grid.Column="2"
                                    Data="{StaticResource ChevronRight}"
                                    FontFamily="{DynamicResource SymbolThemeFontFamily}"
                                    FontSize="12"
                                    Foreground="{DynamicResource MenuFlyoutSubItemChevron}"
                                    Margin="12,0,12,0"
                                    Visibility="Collapsed" />

                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--#region ApplicationViewStates-->
                        <!-- Compact -->
                        <Trigger SourceName="ApplicationViewStatesListener" Property="CurrentStateName" Value="Compact">
                            <Setter TargetName="TextLabel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <!-- LabelOnRight -->
                        <Trigger SourceName="ApplicationViewStatesListener" Property="CurrentStateName" Value="LabelOnRight">
                            <Setter TargetName="ContentViewbox" Property="Margin" Value="{DynamicResource AppBarButtonContentViewboxMargin}" />
                            <Setter TargetName="ContentRoot" Property="MinHeight" Value="{DynamicResource AppBarThemeCompactHeight}" />
                            <Setter TargetName="TextLabel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="TextLabel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="TextLabel" Property="TextAlignment" Value="Left" />
                            <Setter TargetName="TextLabel" Property="Margin" Value="{DynamicResource AppBarButtonTextLabelOnRightMargin}" />
                            <Setter Property="Width" Value="NaN" />
                        </Trigger>
                        <!-- LabelCollapsed -->
                        <Trigger SourceName="ApplicationViewStatesListener" Property="CurrentStateName" Value="LabelCollapsed">
                            <Setter TargetName="ContentRoot" Property="MinHeight" Value="{DynamicResource AppBarThemeCompactHeight}" />
                            <Setter TargetName="TextLabel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <!-- Overflow -->
                        <Trigger SourceName="ApplicationViewStatesListener" Property="CurrentStateName" Value="Overflow">
                            <Setter TargetName="ContentRoot" Property="MinHeight" Value="0" />
                            <Setter TargetName="ContentViewbox" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="TextLabel" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="OverflowTextLabel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!-- OverflowWithToggleButtons -->
                        <Trigger SourceName="ApplicationViewStatesListener" Property="CurrentStateName" Value="OverflowWithToggleButtons">
                            <Setter TargetName="ContentRoot" Property="MinHeight" Value="0" />
                            <Setter TargetName="ContentViewbox" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="TextLabel" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="OverflowTextLabel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="OverflowTextLabel" Property="Margin" Value="38,0,12,0" />
                        </Trigger>
                        <!-- OverflowWithMenuIcons -->
                        <Trigger SourceName="ApplicationViewStatesListener" Property="CurrentStateName" Value="OverflowWithMenuIcons">
                            <Setter TargetName="ContentRoot" Property="MinHeight" Value="0" />
                            <Setter TargetName="ContentViewbox" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="ContentViewbox" Property="VerticalAlignment" Value="Center" />
                            <Setter TargetName="ContentViewbox" Property="Width" Value="16" />
                            <Setter TargetName="ContentViewbox" Property="Height" Value="16" />
                            <Setter TargetName="ContentViewbox" Property="Margin" Value="12,0,12,0" />
                            <Setter TargetName="TextLabel" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="OverflowTextLabel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="OverflowTextLabel" Property="Margin" Value="38,0,12,0" />
                        </Trigger>
                        <!-- OverflowWithToggleButtonsAndMenuIcons -->
                        <Trigger SourceName="ApplicationViewStatesListener" Property="CurrentStateName" Value="OverflowWithToggleButtonsAndMenuIcons">
                            <Setter TargetName="ContentRoot" Property="MinHeight" Value="0" />
                            <Setter TargetName="ContentViewbox" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="ContentViewbox" Property="VerticalAlignment" Value="Center" />
                            <Setter TargetName="ContentViewbox" Property="Width" Value="16" />
                            <Setter TargetName="ContentViewbox" Property="Height" Value="16" />
                            <Setter TargetName="ContentViewbox" Property="Margin" Value="38,0,12,0" />
                            <Setter TargetName="TextLabel" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="OverflowTextLabel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="OverflowTextLabel" Property="Margin" Value="76,0,12,0" />
                        </Trigger>
                        <!--#endregion-->
                        <!--#region CommonStates-->
                        <!-- PointerOver -->
                        <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="PointerOver">
                            <Setter TargetName="Root" Property="Background" Value="{DynamicResource AppBarButtonBackgroundPointerOver}" />
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPointerOver}" />
                            <Setter TargetName="AppBarButtonInnerBorder" Property="Stroke" Value="{DynamicResource AppBarButtonBorderBrushPointerOver}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
                            <Setter TargetName="TextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
                            <Setter TargetName="OverflowTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
                            <Setter TargetName="KeyboardAcceleratorTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonKeyboardAcceleratorTextForegroundPointerOver}" />
                        </Trigger>
                        <!-- Pressed -->
                        <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Pressed">
                            <Setter TargetName="Root" Property="Background" Value="{DynamicResource AppBarButtonBackgroundPressed}" />
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPressed}" />
                            <Setter TargetName="AppBarButtonInnerBorder" Property="Stroke" Value="{DynamicResource AppBarButtonBorderBrushPressed}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
                            <Setter TargetName="TextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
                            <Setter TargetName="OverflowTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
                            <Setter TargetName="KeyboardAcceleratorTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonKeyboardAcceleratorTextForegroundPressed}" />
                        </Trigger>
                        <!-- Disabled -->
                        <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="Disabled">
                            <Setter TargetName="Root" Property="Background" Value="{DynamicResource AppBarButtonBackgroundDisabled}" />
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushDisabled}" />
                            <Setter TargetName="AppBarButtonInnerBorder" Property="Stroke" Value="{DynamicResource AppBarButtonBorderBrushDisabled}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource AppBarButtonForegroundDisabled}" />
                            <Setter TargetName="TextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundDisabled}" />
                            <Setter TargetName="OverflowTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundDisabled}" />
                            <Setter TargetName="KeyboardAcceleratorTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonKeyboardAcceleratorTextForegroundDisabled}" />
                        </Trigger>
                        <!-- OverflowPointerOver -->
                        <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="OverflowPointerOver">
                            <Setter TargetName="Root" Property="Background" Value="{DynamicResource AppBarButtonBackgroundPointerOver}" />
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPointerOver}" />
                            <Setter TargetName="AppBarButtonInnerBorder" Property="Stroke" Value="{DynamicResource AppBarButtonBorderBrushPointerOver}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
                            <Setter TargetName="TextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
                            <Setter TargetName="OverflowTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPointerOver}" />
                            <Setter TargetName="KeyboardAcceleratorTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonKeyboardAcceleratorTextForegroundPointerOver}" />
                            <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource AppBarButtonSubItemChevronForegroundPointerOver}" />
                        </Trigger>
                        <!-- OverflowPressed -->
                        <Trigger SourceName="CommonStatesListener" Property="CurrentStateName" Value="OverflowPressed">
                            <Setter TargetName="Root" Property="Background" Value="{DynamicResource AppBarButtonBackgroundPressed}" />
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushPressed}" />
                            <Setter TargetName="AppBarButtonInnerBorder" Property="Stroke" Value="{DynamicResource AppBarButtonBorderBrushPressed}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
                            <Setter TargetName="TextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
                            <Setter TargetName="OverflowTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundPressed}" />
                            <Setter TargetName="KeyboardAcceleratorTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonKeyboardAcceleratorTextForegroundPressed}" />
                            <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource AppBarButtonSubItemChevronForegroundPressed}" />
                        </Trigger>
                        <!-- OverflowSubMenuOpened -->
                        <!--<Trigger>
                            <Setter TargetName="Root" Property="Background" Value="{DynamicResource AppBarButtonBackgroundSubMenuOpened}" />
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource AppBarButtonBorderBrushSubMenuOpened}" />
                            <Setter TargetName="AppBarButtonInnerBorder" Property="Stroke" Value="{DynamicResource AppBarButtonBorderBrushSubMenuOpened}" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource AppBarButtonForegroundSubMenuOpened}" />
                            <Setter TargetName="TextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundSubMenuOpened}" />
                            <Setter TargetName="OverflowTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonForegroundSubMenuOpened}" />
                            <Setter TargetName="KeyboardAcceleratorTextLabel" Property="Foreground" Value="{DynamicResource AppBarButtonKeyboardAcceleratorTextForegroundSubMenuOpened}" />
                            <Setter TargetName="SubItemChevron" Property="Foreground" Value="{DynamicResource AppBarButtonSubItemChevronForegroundSubMenuOpened}" />
                        </Trigger>-->
                        <!--#endregion-->
                        <!-- KeyboardAcceleratorTextVisible -->
                        <Trigger SourceName="KeyboardAcceleratorTextVisibilityListener" Property="CurrentStateName" Value="KeyboardAcceleratorTextVisible">
                            <Setter TargetName="KeyboardAcceleratorTextLabel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!-- HasFlyout -->
                        <Trigger SourceName="FlyoutStatesListener" Property="CurrentStateName" Value="HasFlyout">
                            <Setter TargetName="SubItemChevron" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ToolBar.IsOverflowItem" Value="True">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Width" Value="NaN" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>